package com.klotski.View;

import com.klotski.Controllers.DBConnector;
import com.klotski.Controllers.GameHandler;
import com.klotski.UI.SavedGameCard;
import com.klotski.Model.Disposition;
import com.klotski.Model.Match;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Rectangle2D;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Pair;

import java.io.IOException;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.ResourceBundle;

public class SavedGamesListView implements Initializable {

    @FXML
    private GridPane grid;
    private GameHandler gameHandler;
    private ArrayList<SavedGameCard> cards;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle)
    {
        //Establishing connection to the Database
        DBConnector db = new DBConnector();

        //Getting all the recorded matches from the Database
        ArrayList<Pair<Match, Integer>> matches = db.listAllRecordedMatches();

        //Initialization of the ListView unnecessary if the arrayList is null
        if(matches == null) return;

        //ArrayList containing the cards for the view
        cards = new ArrayList<SavedGameCard>();
        int index = 0;

        //Foreach entry in Matches, the key provides information regarding the date, the score, the state
        //The value represents the id of the original disposition
        for(Pair<Match, Integer> m: matches)
        {
            //Getting the disposition
            int dispositionID = m.getValue();
            Disposition disp = db.getDisposition(dispositionID);


            if(disp == null) return;

            //Getting disposition image
            String imagePath = disp.getImagePath();

            //Formatting the data from the DB in the standard format (LocalDateTime)
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
            LocalDateTime dateTime = LocalDateTime.parse(m.getKey().getName(), formatter);

            //Creating a new SavedGameCard
            SavedGameCard card = new SavedGameCard(imagePath, dateTime, m.getKey(), dispositionID, disp.getOriginalNumber());

            //Adding the mouseClick Event Handler
            card.getControl().setOnMouseClicked(e -> onMouseClicked(e));

            //Adding the control of the card (Pane) to the Grid
            grid.add(card.getControl(), 0,index++);

            //Adding the element created to the ArrayList (will be used for picking the right card selected)
            cards.add(card);
        }

        //Closing DB Connection
        db.close();
    }

    /**
     * Event handler: handle card selection.
     * @param event event generated by the click of the mouse on a card indicating a match.
     */
    private void onMouseClicked(Event event)
    {
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/com/klotski/GUI/boardgame.fxml"));

        // Open game window
        OpenWindow(fxmlLoader, "Game", event);

        // Get current SavedGame card
        SavedGameCard card = getCurrentSavedGameCard(event);

        // Create new game
        GameHandler gameHandler = new GameHandler(card.getDispositionID(), card.getOriginalDispositionID(), card.getMatch());

        // Communications inter-view
        GameView gameView = fxmlLoader.getController();
        gameView.setController(gameHandler);
    }

    /* BUTTON EVENT HANDLER */
    public void MenuClicked(ActionEvent actionEvent)
    {
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/com/klotski/GUI/menu.fxml"));
        OpenWindow(fxmlLoader, "Main Menu", actionEvent);
    }

    /** Open new window.
     * @param fxmlLoader window loader.
     * @param title title of the new window.
     */

    private void OpenWindow(FXMLLoader fxmlLoader, String title, Event event)
    {
        Parent root = null;
        try {
            root = fxmlLoader.load();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        //Set scene and parameters
        Scene scene = new Scene(root);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setTitle(title);
        stage.setScene(scene);
        stage.setResizable(false);

        // Calculate the center position of the screen
        Rectangle2D screenBound = Screen.getPrimary().getVisualBounds();
        double centerX = (screenBound.getWidth() - scene.getWidth())/2;
        double centerY = (screenBound.getHeight() - scene.getHeight())/2;

        // Set the scene position to the center of the screen
        stage.setX(centerX);
        stage.setY(centerY);

        //Show current stage
        stage.show();
    }

    private SavedGameCard getCurrentSavedGameCard(Event event)
    {
        //Search the card selected among the cards arrayList
        for (SavedGameCard card: cards)
        {
            if(card.getControl() == event.getSource())
                return card;
        }
        //if found, the card is returned, otherwise the method throws an exception
        throw new IllegalArgumentException();
    }
}